#include "dyxlog.h"
#include "dymas.h"
#include "idadef.h"
#include "tool.h"

#include <stdlib.h>
#include <string.h>


unsigned char byte_103573268[] = {
	0x36,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x75,0x01,0x00,0x00,0x00,0x18,0x00,
	0x00,0x00,0x39,0x04,0x00,0x00,0x00,0x40,0x03,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x11,0x00,0x00,0x00,
	0x39,0x09,0x00,0x00,0x00,0x39,0x38,0x00,0x00,0x00,0x63,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0xFC,
	0x01,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x39,0xBE,0xFF,0xFF,0xFF,0x39,0xB9,0xFF,
	0xFF,0xFF,0x7B,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x39,0x04,0x00,0x00,0x00,0xDB,0x01,0x00,0x00,
	0x00,0xEC,0x1C,0x00,0x00,0x00,0x12,0x00,0x00,0x00,0x39,0x04,0x00,0x00,0x00,0x39,0xB6,0x01,0x00,0x00,
	0xB2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0xD1,0x01,0x00,0x00,0x00,0xCC,0x24,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0xB2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,
	0x28,0x00,0x00,0x00,0xD1,0x02,0x00,0x00,0x00,0xCC,0x2C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,
	0x00,0x00,0xB2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0xD1,0x03,0x00,0x00,0x00,
	0xCC,0x34,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x39,0x04,0x00,0x00,0x00,0xDB,0x01,
	0x00,0x00,0x00,0x0E,0x1C,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x11,0x00,0x00,0x00,0x39,0x46,0x00,0x00,
	0x00,0x28,0x38,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x00,0xDB,0x00,
	0x00,0x00,0x00,0xBD,0x38,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0xD1,0x04,0x00,
	0x00,0x00,0x39,0x6C,0x00,0x00,0x00,0xDD,0x1C,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0xDB,0x01,0x00,0x00,
	0x00,0xAC,0x09,0x00,0x00,0x00,0x39,0x54,0x00,0x00,0x00,0x28,0x48,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x00,0xDB,0x00,0x00,0x00,0x00,0xBD,0xDB,0x01,0x00,0x00,0x00,0xCF,
	0x1C,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x38,0x58,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x00,
	0x00,0xD1,0x05,0x00,0x00,0x00,0x39,0x04,0x00,0x00,0x00,0x97,0x1C,0x00,0x00,0x00,0x1C,0x00,0x00,0x00,
	0x0C,0x00,0x00,0x00,0x39,0x3F,0xFE,0xFF,0xFF,0x39,0x3A,0xFE,0xFF,0xFF,0x39,0x04,0x00,0x00,0x00,0x2C
};

unsigned char byte_103571B18[] = {
	0x3D,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x8D,0x04,0x00,0x00,0x00,0xB6,0x00,0x00,0x00,0x00,0xED,
	0xB6,0x00,0x00,0x00,0x00,0x3A,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x19,0x00,0x00,0x00,0x8D,0x17,0x00,0x00,0x00,0x3D,0x00,0x00,0x00,0x00,0x21,0x00,0x00,0x00,
	0x8D,0x04,0x00,0x00,0x00,0x8D,0xD4,0x01,0x00,0x00,0xF3,0xFF,0xFF,0xFF,0xFF,0xB6,0x01,0x00,0x00,0x00,
	0x0D,0xB6,0x01,0x00,0x00,0x00,0x04,0x1F,0x00,0x00,0x00,0x0D,0x00,0x00,0x00,0x8D,0x17,0x00,0x00,0x00,
	0x3D,0x00,0x00,0x00,0x00,0x21,0x00,0x00,0x00,0x8D,0x04,0x00,0x00,0x00,0x8D,0xA3,0x01,0x00,0x00,0xB6,
	0x02,0x00,0x00,0x00,0xED,0xB6,0x02,0x00,0x00,0x00,0x3A,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,0x00,0x00,0x00,0x8D,0x17,0x00,0x00,0x00,0x3D,0x00,0x00,0x00,
	0x00,0x21,0x00,0x00,0x00,0x8D,0x04,0x00,0x00,0x00,0x8D,0x6B,0x01,0x00,0x00,0xB6,0x03,0x00,0x00,0x00,
	0xED,0xB6,0x03,0x00,0x00,0x00,0x3A,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x19,0x00,0x00,0x00,0x8D,0x17,0x00,0x00,0x00,0x3D,0x00,0x00,0x00,0x00,0x21,0x00,0x00,
	0x00,0x8D,0x04,0x00,0x00,0x00,0x8D,0x33,0x01,0x00,0x00,0xEF,0x24,0x00,0x00,0x00,0xB6,0x01,0x00,0x00,
	0x00,0xC6,0xA7,0x01,0x00,0x00,0x00,0x62,0x30,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x40,0x00,0x00,0x00,
	0x30,0x00,0x00,0x00,0x8D,0x04,0x00,0x00,0x00,0xD8,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x15,0x00,0x00,0x00,0x8D,0xE0,0x00,0x00,0x00,0x90,0x48,0x00,0x00,0x00,0x40,0x00,0x00,0x00,
	0x50,0x00,0x00,0x00,0xB6,0x00,0x00,0x00,0x00,0x40,0x58,0x00,0x00,0x00,0xB6,0x01,0x00,0x00,0x00,0xC6,
	0xA7,0x02,0x00,0x00,0x00,0x8D,0x04,0x00,0x00,0x00,0xCF,0x40,0x00,0x00,0x00,0x25,0x01,0x00,0x00,0x00,
	0x93,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0xB6,0x03,0x00,0x00,0x00,0x2E,0x01,0x00,
	0x00,0x00,0xB6,0x01,0x00,0x00,0x00,0x31,0x60,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x5B,0x68,0x00,0x00,0x00,0xB6,0x03,0x00,0x00,0x00,0x75,0xA7,
	0x03,0x00,0x00,0x00,0xB6,0x03,0x00,0x00,0x00,0x2E,0x03,0x00,0x00,0x00,0xB6,0x01,0x00,0x00,0x00,0xFF,
	0x70,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x74,0x03,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0xB6,0x03,0x00,0x00,0x00,0x89,0xA7,
	0x04,0x00,0x00,0x00,0x3D,0x01,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x8D,0x04,0x00,0x00,0x00,0x8D,0x20,
	0x00,0x00,0x00,0x84,0x88,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0xA7,0x05,0x00,0x00,0x00,0x6C,0x40,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x8D,0x04,0x00,0x00,0x00,0xB6,0x02,0x00,0x00,0x00,0xAE,0x40,0x00,0x00,
	0x00,0x20,0x00,0x00,0x00,0x21,0x00,0x00,0x00,0x8D,0x04,0x00,0x00,0x00,0xBF,0x21,0x00,0x00,0x00,0x94,
	0x00,0x00,0x00,0x00
};

unsigned char byte_103572640[] = {
	0xA3,0x01,0x00,0x00,0x00,0x6b,0x01,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0xAE,0x04,0x00,0x00,0x00,0x56,
	0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x16,0x00,0x00,0x00,0xAE,0x04,0x00,0x00,0x00,0xAE,0xBC,0x01,
	0x00,0x00,0x85,0xFF,0xFF,0xFF,0xFF,0xA3,0x01,0x00,0x00,0x00,0xB6,0xFF,0x00,0x00,0x00,0xA3,0x00,0x00,
	0x00,0x00,0xC6,0x18,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD4,0xA3,0x00,0x00,0x00,
	0x00,0x7D,0x18,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA3,0x00,0x00,0x00,0x00,0x57,
	0x18,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x00,0x0D,0x01,0x00,0x00,
	0x00,0x9D,0x1D,0x00,0x00,0x00,0xA3,0x00,0x00,0x00,0x00,0x7D,0x18,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xAE,0x04,0x00,0x00,0x00,0x3C,0x18,0x00,0x00,0x00,0xA3,0x01,0x00,0x00,0x00,0x14,
	0x01,0x00,0x00,0x00,0x0D,0x00,0x00,0x00,0xAE,0x57,0x00,0x00,0x00,0x3F,0x18,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x11,0x00,0x00,0x00,0xAE,0x40,0x00,0x00,0x00,0xA3,0x00,0x00,0x00,0x00,0xBD,0x00,0x00,0x00,
	0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA3,0x00,0x00,0x00,0x00,0xD0,0x18,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE9,0xA3,0x00,0x00,0x00,0x00,0x7D,0x18,0x00,0x00,0x00,0x01,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xAE,0x62,0x00,0x00,0x00,0xAE,0x04,0x00,0x00,0x00,0xD7,0x18,0x00,0x00,
	0x00,0x01,0x00,0x00,0x00,0xA3,0x01,0x00,0x00,0x00,0x31,0x09,0x00,0x00,0x00,0xAE,0x45,0x00,0x00,0x00,
	0xA3,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x62,0xA3,0x00,0x00,0x00,0x00,0xD0,0x18,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0xE9,0xA3,0x00,0x00,0x00,0x00,0x7D,0x18,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xAE,0x04,0x00,0x00,0x00,0xEC,0xFF,0x00,0x00,0x00,0xA3,0x00,0x00,0x00,0x00,0x59,0x18,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE9,0xA3,0x00,0x00,0x00,0x00,0x19,0x18,0x00,0x00,0x00,0x01,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0xA3,0x00,0x00,0x00,0x00,0xCF,0x18,0x00,0x00,
	0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD6,0xF0,0x00,0x00,0x00,0xA3,0x00,0x00,0x00,0x00,0x35,
	0x18,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x69,0x0F,0x00,0x00,
	0x00,0xA3,0x00,0x00,0x00,0x00,0x7D,0x18,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE6,
	0x18,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0xAE,0x3A,0xFE,0xFF,0xFF,0xAE,0x35,0xFE,
	0xFF,0xFF,0xA3,0x01,0x00,0x00,0x00,0x17,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x19,0x00,0x00,0x00,0xAE,0x22,0x0A,0x00,0x00,0xC3,0x00,0x00,0x00,0x00,0x7F,0x20,
	0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA2,0x28,0x00,0x00,0x00,0xA3,0x02,0x00,0x00,
	0x00,0xDD,0x38,0x00,0x00,0x00,0x0D,0x02,0x00,0x00,0x00,0xA3,0x02,0x00,0x00,0x00,0x92,0x02,0x00,0x00,
	0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA3,0x02,0x00,0x00,0x00,0x92,0x01,0x00,0x00,0x00,0x04,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA3,0x02,0x00,0x00,0x00,0x65,0x00,0x00,0x00,0x00,0x04,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x6F,0x40,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x40,0x00,
	0x00,0x00,0x10,0x00,0x00,0x00,0xC7,0x44,0x00,0x00,0x00,0x6F,0x40,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
	0x40,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x8A,0x48,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x44,0x00,0x00,
	0x00,0x40,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0xA3,0x02,0x00,0x00,0x00,0x68,0x00,0x00,0x00,0x00,0x04,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA3,0x02,0x00,0x00,0x00,0x1A,0x01,0x00,0x00,0x00,0x04,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0xA3,0x02,0x00,0x00,0x00,0x68,0x02,
	0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA3,0x02,0x00,0x00,0x00,0x33,0x00,0x00,0x00,
	0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0xAB,0x44,0x00,0x00,0x00,0x18,0x00,
	0x00,0x00,0xA3,0x02,0x00,0x00,0x00,0x68,0x01,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xA3,0x02,0x00,0x00,0x00,0x1A,0x02,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,
	0x00,0x00,0x08,0x00,0x00,0x00,0xA3,0x02,0x00,0x00,0x00,0x68,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xA3,0x02,0x00,0x00,0x00,0x33,0x01,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x18,0x00,0x00,0x00,0xA1,0x48,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0xA3,
	0x02,0x00,0x00,0x00,0xF9,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA3,0x02,0x00,
	0x00,0x00,0xCD,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x40,
	0x00,0x00,0x00,0x42,0xA3,0x02,0x00,0x00,0x00,0xF9,0x01,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0xA3,0x02,0x00,0x00,0x00,0x3D,0x01,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x48,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0xA5,0x10,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x40,0x00,0x00,
	0x00,0xA3,0x02,0x00,0x00,0x00,0xF9,0x02,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA3,
	0x02,0x00,0x00,0x00,0x61,0x02,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA3,0x02,0x00,
	0x00,0x00,0xE2,0x01,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4C,0x00,0x00,0x00,0x0D,
	0x03,0x00,0x00,0x00,0xDF,0x50,0x00,0x00,0x00,0xA3,0x02,0x00,0x00,0x00,0x61,0x01,0x00,0x00,0x00,0x04,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA3,0x02,0x00,0x00,0x00,0xE2,0x00,0x00,0x00,0x00,0x04,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x54,0x00,0x00,0x00,0x0D,0x04,0x00,0x00,0x00,0x60,0x5C,0x00,0x00,0x00,0x58,
	0x00,0x00,0x00,0x58,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0xA3,0x02,0x00,0x00,0x00,0xE2,0x02,0x00,0x00,
	0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x64,0x00,0x00,0x00,0x0D,0x05,0x00,0x00,0x00,0xDF,0x68,
	0x00,0x00,0x00,0xA3,0x02,0x00,0x00,0x00,0x6D,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x60,0x00,0x00,0x00,0xA3,0x02,0x00,0x00,0x00,0x61,0x02,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xA3,0x02,0x00,0x00,0x00,0xE2,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x6C,0x00,0x00,0x00,0x0D,0x06,0x00,0x00,0x00,0xDF,0x70,0x00,0x00,0x00,0xA3,0x02,0x00,0x00,0x00,
	0x61,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA3,0x02,0x00,0x00,0x00,0xE2,0x01,
	0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x74,0x00,0x00,0x00,0x0D,0x07,0x00,0x00,0x00,
	0xDF,0x78,0x00,0x00,0x00,0xA3,0x02,0x00,0x00,0x00,0x61,0x01,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xA3,0x02,0x00,0x00,0x00,0xE2,0x02,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x7C,0x00,0x00,0x00,0x0D,0x08,0x00,0x00,0x00,0xDF,0x80,0x00,0x00,0x00,0xA3,0x02,0x00,0x00,0x00,
	0x61,0x02,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA3,0x00,0x00,0x00,0x00,0xC9,0x84,
	0x00,0x00,0x00,0xA3,0x00,0x00,0x00,0x00,0x83,0x04,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x88,0x00,0x00,0x00,0xA3,0x00,0x00,0x00,0x00,0x83,0x08,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x8C,0x00,0x00,0x00,0xA3,0x00,0x00,0x00,0x00,0xC9,0x90,0x00,0x00,0x00,0x0D,0x09,0x00,
	0x00,0x00,0x67,0x98,0x00,0x00,0x00,0x94,0x00,0x00,0x00,0xA3,0x00,0x00,0x00,0x00,0x83,0x04,0x00,0x00,
	0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9C,0x00,0x00,0x00,0x0D,0x0A,0x00,0x00,0x00,0x67,0xA4,
	0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0xA3,0x00,0x00,0x00,0x00,0x83,0x08,0x00,0x00,0x00,0x01,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xA8,0x00,0x00,0x00,0x0D,0x0B,0x00,0x00,0x00,0x60,0xB0,0x00,0x00,0x00,0xAC,
	0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0xB4,0x00,0x00,0x00,0x0D,0x0C,0x00,0x00,0x00,0x60,0xB8,0x00,0x00,
	0x00,0xA0,0x00,0x00,0x00,0x94,0x00,0x00,0x00,0xBC,0x00,0x00,0x00,0x0D,0x0D,0x00,0x00,0x00,0x4A,0xC4,
	0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x04,0xC8,0x00,0x00,0x00,0xAC,0x00,0x00,0x00,
	0xCC,0x00,0x00,0x00,0x0D,0x0E,0x00,0x00,0x00,0x9C,0xD0,0x00,0x00,0x00,0x94,0x00,0x00,0x00,0xC8,0x00,
	0x00,0x00,0xAC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB9,0xD4,0x00,0x00,0x00,0xAE,0x04,0x00,0x00,0x00,
	0xDF,0xD4,0x00,0x00,0x00,0xC3,0x01,0x00,0x00,0x00,0x31,0x0E,0x00,0x00,0x00,0xAE,0x04,0x00,0x00,0x00,
	0xAE,0x25,0x02,0x00,0x00,0x45,0x20,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0xA3,0x02,0x00,0x00,0x00,0x58,
	0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x94,0x00,0x00,0x00,0xFB,0x94,0x00,0x00,
	0x00,0xA3,0x02,0x00,0x00,0x00,0xC5,0x01,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,
	0x00,0x00,0x00,0x32,0xA0,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0xA3,0x02,0x00,0x00,0x00,0x58,0x02,0x00,
	0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xAC,0x00,0x00,0x00,0xE3,0xAC,0x00,0x00,0x00,0xAC,
	0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x94,0x00,0x00,0x00,0x0A,0xD8,0x00,0x00,0x00,0x6F,0xD8,0x00,0x00,
	0x00,0x10,0x00,0x00,0x00,0xD8,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0xC7,0xDC,0x00,0x00,0x00,0x6F,0xD8,
	0x00,0x00,0x00,0x08,0x00,0x00,0x00,0xD8,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x8A,0xE0,0x00,0x00,0x00,
	0xE0,0x00,0x00,0x00,0xDC,0x00,0x00,0x00,0xD8,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0xE1,0x94,0x00,0x00,
	0x00,0xA0,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x94,0x08,0x00,0x00,0x00,0xAC,0x00,0x00,0x00,0x94,0x00,
	0x00,0x00,0x18,0x00,0x00,0x00,0x73,0xDC,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0xE1,0xA0,0x00,0x00,0x00,
	0xAC,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x94,0x08,0x00,0x00,0x00,0x94,0x00,0x00,0x00,0xA0,0x00,0x00,
	0x00,0x18,0x00,0x00,0x00,0x9B,0xFE,0xE0,0x00,0x00,0x00,0xDC,0x00,0x00,0x00,0xD8,0x00,0x00,0x00,0x94,
	0x00,0x00,0x00,0xFE,0x94,0x00,0x00,0x00,0xE0,0x00,0x00,0x00,0xD8,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,
	0x84,0xA0,0x00,0x00,0x00,0xE0,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0xE7,0x10,0x00,0x00,0x00,0xDC,0x00,
	0x00,0x00,0xD8,0x00,0x00,0x00,0xAC,0x00,0x00,0x00,0x5E,0xAC,0x00,0x00,0x00,0x6F,0xAC,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0xAC,0x00,0x00,0x00,0x1F,0x00,0x00,0x00,0xC7,0xE4,0x00,0x00,0x00,0x6F,0x94,0x00,
	0x00,0x00,0x16,0x00,0x00,0x00,0x94,0x00,0x00,0x00,0x0A,0x00,0x00,0x00,0x40,0xE8,0x00,0x00,0x00,0xA0,
	0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xE4,0x00,0x00,0x00,0xE8,0x00,0x00,0x00,0x03,0x01,0x00,0x00,0x00,
	0xA0,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xE4,0x00,0x00,0x00,0xF7,0xE8,0x00,0x00,0x00,0x1F,0x00,0x00,
	0x00,0x40,0x94,0x00,0x00,0x00,0xE8,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xA0,0x00,0x00,0x00,0xE4,0x00,
	0x00,0x00,0x03,0x16,0x00,0x00,0x00,0xE8,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xA0,0x00,0x00,0x00,0xF7,
	0xE4,0x00,0x00,0x00,0x0A,0x00,0x00,0x00,0x40,0xAC,0x00,0x00,0x00,0xE4,0x00,0x00,0x00,0xFF,0xFF,0xFF,
	0xFF,0xE8,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x74,0xA0,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x01,0x00,
	0x00,0x00,0x20,0x00,0x00,0x00,0xAE,0x04,0x00,0x00,0x00,0x4B,0x20,0x00,0x00,0x00,0x00,0x00,0x01,0x00,
	0x11,0x00,0x00,0x00,0xAE,0x16,0x00,0x00,0x00,0xB8,0x11,0x10,0x01,0x00,0x20,0x00,0x00,0x00,0x20,0x00,
	0x00,0x00,0xAE,0x04,0x00,0x00,0x00,0x71,0xD4,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0xD4,0x00,0x00,0x00,
	0xAE,0xCF,0xFD,0xFF,0xFF,0xAE,0xCA,0xFD,0xFF,0xFF,0x45,0x20,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0xA3,
	0x02,0x00,0x00,0x00,0x58,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x94,0x00,0x00,
	0x00,0xFB,0x94,0x00,0x00,0x00,0xA3,0x02,0x00,0x00,0x00,0xC5,0x01,0x00,0x00,0x00,0x04,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x32,0xA0,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0xA3,0x02,0x00,
	0x00,0x00,0x58,0x02,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xAC,0x00,0x00,0x00,0xE3,
	0xAC,0x00,0x00,0x00,0xAC,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x94,0x00,0x00,0x00,0x0A,0xEC,0x00,0x00,
	0x00,0x6F,0xEC,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0xEC,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0xC7,0xF0,
	0x00,0x00,0x00,0x6F,0xEC,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0xEC,0x00,0x00,0x00,0x18,0x00,0x00,0x00,
	0x8A,0xF4,0x00,0x00,0x00,0xF4,0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0xEC,0x00,0x00,0x00,0x18,0x00,0x00,
	0x00,0xE1,0x94,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x94,0x08,0x00,0x00,0x00,0xAC,
	0x00,0x00,0x00,0x94,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x73,0xF0,0x00,0x00,0x00,0x18,0x00,0x00,0x00,
	0xE1,0xA0,0x00,0x00,0x00,0xAC,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x94,0x08,0x00,0x00,0x00,0x94,0x00,
	0x00,0x00,0xA0,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x9B,0xFE,0xF4,0x00,0x00,0x00,0xF0,0x00,0x00,0x00,
	0xEC,0x00,0x00,0x00,0x94,0x00,0x00,0x00,0xFE,0x94,0x00,0x00,0x00,0xF4,0x00,0x00,0x00,0xEC,0x00,0x00,
	0x00,0xA0,0x00,0x00,0x00,0x84,0xA0,0x00,0x00,0x00,0xF4,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0xE7,0x10,
	0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0xEC,0x00,0x00,0x00,0xAC,0x00,0x00,0x00,0x78,0xAC,0x00,0x00,0x00,
	0xA0,0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x0D,0x0F,0x00,0x00,0x00,0x60,0xFC,0x00,0x00,0x00,0xA0,0x00,
	0x00,0x00,0x94,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x0D,0x10,0x00,0x00,0x00,0x4A,0x08,0x01,0x00,0x00,
	0x04,0x01,0x00,0x00,0x04,0x01,0x00,0x00,0x04,0x0C,0x01,0x00,0x00,0xAC,0x00,0x00,0x00,0x10,0x01,0x00,
	0x00,0x0D,0x11,0x00,0x00,0x00,0x4A,0x14,0x01,0x00,0x00,0x94,0x00,0x00,0x00,0x0C,0x01,0x00,0x00,0x04,
	0xAC,0x00,0x00,0x00,0x94,0x00,0x00,0x00,0x18,0x01,0x00,0x00,0x0D,0x12,0x00,0x00,0x00,0x60,0x1C,0x01,
	0x00,0x00,0x94,0x00,0x00,0x00,0xA0,0x00,0x00,0x00,0x20,0x01,0x00,0x00,0x0D,0x13,0x00,0x00,0x00,0x60,
	0x24,0x01,0x00,0x00,0xA0,0x00,0x00,0x00,0xAC,0x00,0x00,0x00,0x28,0x01,0x00,0x00,0x0D,0x14,0x00,0x00,
	0x00,0xB3,0x2C,0x01,0x00,0x00,0xAC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x01,0x00,0x00,0xAE,0x04,
	0x00,0x00,0x00,0xC0,0x30,0x01,0x00,0x00,0x02,0x00,0x00,0x00,0x16,0x00,0x00,0x00,0xAE,0x04,0x00,0x00,
	0x00,0xAE,0x4F,0x01,0x00,0x00,0x71,0xAC,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x34,0x01,0x00,0x00,0x0D,
	0x15,0x00,0x00,0x00,0xBE,0x3C,0x01,0x00,0x00,0x38,0x01,0x00,0x00,0x38,0x01,0x00,0x00,0xA0,0x00,0x00,
	0x00,0xA0,0x00,0x00,0x00,0x5D,0xA0,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x40,0x01,0x00,0x00,0x0D,0x16,
	0x00,0x00,0x00,0xBE,0x48,0x01,0x00,0x00,0x44,0x01,0x00,0x00,0x44,0x01,0x00,0x00,0xAC,0x00,0x00,0x00,
	0xAC,0x00,0x00,0x00,0x5D,0xAC,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x4C,0x01,0x00,0x00,0x0D,0x17,0x00,
	0x00,0x00,0xBE,0x54,0x01,0x00,0x00,0x50,0x01,0x00,0x00,0x50,0x01,0x00,0x00,0xA0,0x00,0x00,0x00,0xA0,
	0x00,0x00,0x00,0x5D,0xA0,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x58,0x01,0x00,0x00,0x0D,0x18,0x00,0x00,
	0x00,0xBE,0x60,0x01,0x00,0x00,0x5C,0x01,0x00,0x00,0x5C,0x01,0x00,0x00,0xAC,0x00,0x00,0x00,0xAC,0x00,
	0x00,0x00,0x5D,0xAC,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x64,0x01,0x00,0x00,0x0D,0x19,0x00,0x00,0x00,
	0xBE,0x6C,0x01,0x00,0x00,0x68,0x01,0x00,0x00,0x68,0x01,0x00,0x00,0xA0,0x00,0x00,0x00,0xA0,0x00,0x00,
	0x00,0x5D,0xA0,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x70,0x01,0x00,0x00,0x0D,0x1A,0x00,0x00,0x00,0xBE,
	0x78,0x01,0x00,0x00,0x74,0x01,0x00,0x00,0x74,0x01,0x00,0x00,0xAC,0x00,0x00,0x00,0xAC,0x00,0x00,0x00,
	0x5D,0xAC,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x7C,0x01,0x00,0x00,0x0D,0x1B,0x00,0x00,0x00,0x12,0x84,
	0x01,0x00,0x00,0x80,0x01,0x00,0x00,0x80,0x01,0x00,0x00,0xA0,0x00,0x00,0x00,0x04,0xA0,0x00,0x00,0x00,
	0xA0,0x00,0x00,0x00,0x88,0x01,0x00,0x00,0x0D,0x1C,0x00,0x00,0x00,0xBE,0x90,0x01,0x00,0x00,0x8C,0x01,
	0x00,0x00,0x8C,0x01,0x00,0x00,0xAC,0x00,0x00,0x00,0xAC,0x00,0x00,0x00,0x5D,0x30,0x01,0x00,0x00,0x01,
	0x00,0x00,0x00,0x30,0x01,0x00,0x00,0xAE,0xA7,0xFE,0xFF,0xFF,0xAE,0xA2,0xFE,0xFF,0xFF,0xDF,0x94,0x00,
	0x00,0x00,0xA3,0x00,0x00,0x00,0x00,0xEA,0xA0,0x00,0x00,0x00,0xA3,0x00,0x00,0x00,0x00,0xAC,0x04,0x00,
	0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xAC,0x00,0x00,0x00,0xA3,0x00,0x00,0x00,0x00,0xAC,
	0x08,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x84,0x00,0x00,0x00,0xA3,0x02,0x00,0x00,
	0x00,0x6D,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x88,0x00,0x00,0x00,0xA3,0x02,
	0x00,0x00,0x00,0x6D,0x01,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8C,0x00,0x00,0x00,
	0xA3,0x02,0x00,0x00,0x00,0x61,0x02,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xAE,0x04,
	0x00,0x00,0x00,0xAE,0x04,0x00,0x00,0x00,0x4E,0x00,0x00,0x00
};

unsigned char byte_1035734C0[] = {
	0x69,0x00,0x00,0x00,0x00,0xEC,0x04,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,
	0x00,0x00,0x00,0xC4,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x83,0x1C,0x00,0x00,0x00,0x00,0xA8,0x04,
	0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x14,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x1C,0x00,0x00,0x00,0x00,0xC4,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x83,0x1C,0x00,0x00,0x00,0x00,
	0xA8,0x04,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x14,0x04,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x1C,0x00,0x00,0x00,0x00,0xC4,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x83,0x1C,0x00,0x00,
	0x00,0x00,0xA8,0x04,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x23,0x04,0x00,0x00,0x00,
	0xE5,0x04,0x00,0x00,0x00,0xD4
};

unsigned char byte_103571E78[] = {
	0xBA,0x00,0xff,0x00,0xff,0x9E,0x00,0x00,0x00,0x00,0x75,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0xFF,
	0x00,0xFF,0x00,0x9E,0x00,0x00,0x00,0x00,0x6F,0x9E,0x00,0x00,0x00,0x00,0x0C,0x9E,0x00,0x00,0x00,0x00,
	0x4B,0x10,0x00,0x00,0x00,0x9E,0x00,0x00,0x00,0x00,0xEA,0x10,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x28,
	0x04,0x00,0x00,0x00,0x6B,0x04,0x00,0x00,0x00,0x40
};


uint32_t sub_1019F115C(char* result, uint32_t **a2);
uint32_t sub_1019F1438(uint32_t *result, int a2, __int64 a3);
uint32_t sub_1019F3238(uint32_t a1);
uint32_t sub_1019F4694(uint32_t a1);


void x_en(const char* as, uint32_t asLen, char*& xl, uint32_t* xlLen)
{
	sub_1019F0448(as, asLen, 1, xl, xlLen);
}

/*
	xlog de
*/
void sub_1019EF3B4(const char *en, uint32_t el, char*& de, uint32_t* deLen)
{
	
	__int64 v3; // x19
	__int64 v4; // x20
	char *v7; // x26
	char *v8; // x20
	__int64 v9; // x8
	__int64 *v10; // x8
	unsigned int v11; // w9
	int v12; // w8
	__int64 v13; // x8
	uint64_t *v14; // t1
	__int64 *v15; // x8
	__int64 v16; // x9
	uint64_t *v17; // t1
	uint64_t v24; // x8
	__int64 v25; // x11
	__int64 v26; // x9
	__int64 v27; // x10
	unsigned __int64 v28; // x9
	unsigned __int64 v29; // x9
	char *v30; // x23
	char *v31; // x8
	signed __int64 v32; // x9
	__int64 v33; // x8
	signed int v34; // w9
	__int64 v35; // x10
	__int64 v36; // x9
	int v37; // w9
	__int64 v38; // x10
	int v39; // w9
	__int64 *v40; // x9
	__int64 v41; // x10
	__int64 v42; // x9
	int v43; // w10
	__int64 v44; // x10
	__int64 v45; // x9
	__int64 v46; // x10
	uint32_t *v47; // t1
	int v48; // w9
	__int64 v49; // x10
	int v50; // w9
	__int64 v51; // x10
	int v52; // w9
	uint32_t *v53; // t1
	signed int v54; // w8
	__int64 *v55; // t1
	__int64 v56; // x8
	__int64 *v57; // x10
	uint64_t *v58; // t1
	signed __int64 v59; // x8
	int v60; // w10
	uint32_t v61; // w11
	int v62; // t1
	__int64 v63; // x9
	unsigned __int8 v64; // vf
	int v65; // w10
	const char *v69; // [xsp+18h] [xbp-378h]
	__int64 v70; // [xsp+20h] [xbp-370h]
	__int64 v71; // [xsp+28h] [xbp-368h]
	int v72; // [xsp+34h] [xbp-35Ch]
	__int64 v73; // [xsp+38h] [xbp-358h]
	char v74[0x100] = { 0x00 }; // [xsp+40h] [xbp-350h]
	char v75[0x100] = { 0x00 }; // [xsp+140h] [xbp-250h]
//    void *v86; // [xsp+1C8h] [xbp-1C8h]
	char *v87; // [xsp+1D0h] [xbp-1C0h]
	char v88[0x100] = { 0x00 }; // [xsp+1D8h] [xbp-1B8h]
	char v89[0x100] = { 0x00 }; // [xsp+2D8h] [xbp-B8h]


	v3 = (__int64)deLen;
	v4 = (__int64)de;
	v70 = v3;
	v71 = v4;
	v69 = en;
	*(uint32_t*)v88 = el;
	char* de_buf;
	v7 = (char*)v74;

	v8 = (char*)byte_103571B18;
	do
	{
		while (1)
		{
			while (1)
			{
				while (1)
				{
					while (1)
					{
						while (1)
						{
							v54 = (unsigned __int8)*v8;
							//printf(" -> 0x%02x_%d", v54, v54);
							if (v54 > 136)
								break;
							if (v54 > 63)
							{
								if (v54 <= 107)
								{
									switch (v54)
									{
									case 64:
										v13 = **(uint64_t **)v7;
										v14 = (uint64_t*)*(uint64_t *)(v7 - 8);
										v7 -= 8;
										*v14 = v13;
									LABEL_17:
										*(uint64_t *)v7 = (uint64_t)((char*)v75 + *(signed int *)(v8 + 1));
										goto def_1019EF460;
									case 91:
										v16 = *(uint64_t *)(v7 - 8);
										v15 = *(__int64 **)v7;
										v17 = (uint64_t *)*(uint64_t *)(v7 - 16);
										v7 -= 16;
										*v17 = (uint64_t)((char *)v15 + v16);
										goto LABEL_17;
									case 98:
										*(uint64_t *)((char*)v75 + *(signed int *)(v8 + 1)) = *(uint64_t *)((char*)v75 + *(signed int *)(v8 + 5));//??? de_buf addr
										*(uint64_t *)((char*)v75 + *(signed int *)(v8 + 9)) = *(uint64_t *)((char*)v75 + *(signed int *)(v8 + 13));
										goto LABEL_157;
									}
								}
								else if (v54 > 116)
								{
									if (v54 == 117)
									{
										++v8;
										**(uint32_t **)(v7 - 8) = ***(uint32_t ***)v7;
										goto LABEL_30;
									}
									if (v54 == 132)
									{
										v9 = *(uint64_t *)((char*)v75 + *(signed int *)(v8 + 5));
									LABEL_7:
										*(uint64_t *)((char*)v75 + *(signed int *)(v8 + 1)) = v9;
										v8 += 9;
									}
								}
								else
								{
									if (v54 == 108)
									{
										v9 = *(signed int *)(v8 + 5);
										goto LABEL_7;
									}
									if (v54 == 116)
									{
										v57 = *(__int64 **)v7;
										v58 = (uint64_t *)*((uint64_t *)v7 - 1);
										v7 -= 8;
										*v58 = *(uint64_t *)((char*)v75 + *(signed int *)(v8 + 5)) + *(signed int *)(v8 + 1) * (uint64_t)v57;
										*(uint64_t *)v7 = (uint64_t)((char*)v75 + *(signed int *)(v8 + 9));
										v8 += 13;
									}
								}
							}
							else if (v54 <= 45)
							{
								switch (v54)
								{
								case 4:
									v11 = ((*(uint32_t *)(v7 - 8) | (unsigned int)-**(uint32_t **)v7) ^ *((uint32_t *)v7 - 4)) >> *(uint32_t *)(v8 + 1);
									*(uint32_t *)(v7 - 16) = v11;
									if (v11)
										v8 += *(signed int *)(v8 + 5) + 1;
									else
										v8 += 9;
									v7 -= 24;
									break;
								case 13:
									++v8;
									*(uint32_t *)v7 = **(uint32_t **)v7;
									break;
								case 37:
									v59 = (signed __int64)(v8 + 1);
									v60 = *(uint32_t *)(v8 + 1);
									v62 = *(uint32_t *)v7;
									v7 -= 8;
									v61 = v62;
									v63 = *(signed int *)(v8 + 5);
									v64 = __OFSUB__(v62, v60);
									v65 = v62 - v60;
									if (!((v65 < 0) ^ v64) && v61 <= *(uint32_t *)(v8 + 9))
										v63 = *(signed int *)((char*)v8 + 4 * v65 + 13);
								LABEL_152:
									v8 = (char *)(v59 + v63);
									break;
								}
							}
							else if (v54 > 57)
							{
								if (v54 == 58)
								{
									v25 = *(uint64_t *)(v7 - 8);
									v26 = **(uint64_t **)v7;
									*(uint64_t *)v7 = v26;
									v27 = *(uint64_t *)(v8 + 1);
									v28 = v27 ^ (v25 | -v26);
									*(uint64_t *)(v7 - 8) = v28;
									*(uint64_t *)v7 = v27;
									v29 = v28 >> *(uint64_t *)(v8 + 9);
									*(uint64_t *)(v7 - 8) = v29;
									if ((uint32_t)v29)
										v8 += *(signed int *)(v8 + 17) + 1;
									else
										v8 += 21;
								LABEL_30:
									v7 -= 16;
								}
								else if (v54 == 61)
								{
									*(uint8_t*)((char*)v75 + *(signed int *)(v8 + 5)) = *(uint8_t*)(v8 + 1);
									v8 += 9;
								}
							}
							else
							{
								if (v54 == 46)
								{
									*(uint64_t *)v7 = **(uint64_t **)v7;
									v7 += 8;
									*(uint32_t *)v7 = *(uint32_t *)(v8 + 1);
									goto def_1019EF460;
								}
								if (v54 == 49)
								{
									**(uint32_t **)(v7 - 16) = **(uint32_t **)v7 - *(uint32_t *)(v7 - 8);
									v56 = *(signed int *)(v8 + 13) * *(uint64_t *)(v8 + 5);
									*(uint64_t *)(v7 - 16) = (uint64_t)((char*)v75 + *(signed int *)(v8 + 1));
									*(uint64_t *)(v7 - 8) = v56;
									*(uint64_t *)v7 = *(uint64_t *)((char*)v75 + *(signed int *)(v8 + 17));
									v8 += 21;
								}
							}
						}
						if (v54 <= 197)
							break;
						if (v54 <= 236)
						{
							switch (v54)
							{
							case 198:
								++v8;
								v10 = *(__int64 **)v7;
								goto LABEL_13;
							case 207:
								v12 = **(unsigned __int8 **)((char*)v75 + *(signed int *)(v8 + 1));
							LABEL_23:
								*(uint32_t *)(v7 + 8) = v12;
								v7 += 8;
								goto def_1019EF460;
							case 216:
								v59 = (signed __int64)(v8 + 1);
								if (*(uint64_t *)((char*)v75 + *(signed int *)(v8 + 1)) != *(uint64_t *)(v8 + 5))
								{
									v63 = *(signed int *)(v8 + 13);
									goto LABEL_152;
								}
							LABEL_157:
								v8 += 17;
								break;
							}
						}
						else if (v54 > 242)
						{
							if (v54 == 243)
							{
								v12 = *(uint32_t *)(v8 + 1);
								goto LABEL_23;
							}
							if (v54 == 255)
							{
								**(uint32_t **)(v7 - 16) = **(uint32_t **)v7 - *(uint32_t *)(v7 - 8);
								*(uint64_t *)((char*)v75 + *(signed int *)(v8 + 1)) = *(uint64_t *)((char*)v75 + *(signed int *)(v8 + 5));
								*(uint64_t *)(v7 - 16) = (uint64_t)((char*)v75 + *(signed int *)(v8 + 9));
								*(uint64_t *)(v7 - 8) = *(uint64_t *)(v8 + 13);
								v8 += 21;
								v7 -= 8;
							}
						}
						else if (v54 == 237)
						{
							++v8;
							*(uint64_t *)v7 = **(uint64_t **)v7;
						}
						else if (v54 == 239)
						{
							v24 = (uint64_t)((char*)v75 + *(signed int *)(v8 + 1));
						LABEL_131:
							*(uint64_t *)(v7 + 8) = v24;
							v7 += 8;
							goto def_1019EF460;
						}
					}
					if (v54 <= 166)
						break;
					if (v54 > 181)
					{
						if (v54 == 182)
						{
							//printf("_%d    ", *(uint32_t *)(v8 + 1));
							switch (*(uint32_t *)(v8 + 1))
							{
							case 0:
								v24 = (uint64_t)&v69;
								goto LABEL_131;
							case 1:
								v24 = (uint64_t)&v88;
								goto LABEL_131;
							case 2:
								v24 = (uint64_t)&v71;
								goto LABEL_131;
							case 3:
								v24 = (uint64_t)&v70;
								goto LABEL_131;
							default:
								v7 += 8;
								break;
							}
						def_1019EF460:
							v8 += 5;
						}
						else if (v54 == 191)
						{
							v7[8] = v75[*(signed int *)(v8 + 1)];
							v7 += 8;
							goto def_1019EF460;
						}
					}
					else
					{
						if (v54 == 167)
						{
							//printf("_%d    ", *(uint32_t *)(v8 + 1));
							switch (*(uint32_t *)(v8 + 1))
							{
							case 1:
								de_buf = (char*)malloc(el);
								*(uint64_t *)((char*)v75 + 0x38) = (uint64_t)de_buf;
								goto def_1019EF460;
							case 2:
								memcpy(de_buf, en, el);
								goto def_1019EF460;
							case 3:
								v30 = (char*)v88;
								v73 = (int64_t)(de_buf+1);
								v72 = el-1;
								v31 = (char*)byte_103573268;
								break;
							case 4:
								//memcpy(de_buf, de_buf+5, el-5);
								goto def_1019EF460;
							case 5:
								//free(v86);
								goto def_1019EF460;
							default:
								goto def_1019EF460;
							}

							while (1)
							{
							LABEL_37:
								v87 = v31;
								do
								{
									while (1)
									{
										while (1)
										{
											while (1)
											{
												v34 = (unsigned __int8)*v31;
												//printf(" -->> 0x%02x_%d", v34, v34);
												if (v34 > 171)
													break;
												if (v34 > 63)
												{
													if (v34 <= 116)
													{
														if (v34 == 64)
														{
															v87 = v31 + 1;
															if (*(uint32_t *)&v89[*(signed int *)(v31 + 5)] >= *(uint32_t *)(v31 + 1))
															{
																v31 += *(signed int *)(v31 + 9) + 1;
																goto LABEL_37;
															}
															goto LABEL_104;
														}
														if (v34 == 99)
														{
															v87 = v31 + 1;
															*(uint32_t*)(v30 + 8) = *(uint32_t *)(v31 + 1);
															v37 = *(uint32_t *)(v31 + 5);
															v38 = *(unsigned int *)&v89[*(signed int *)(v31 + 21)] * *(uint64_t *)(v31 + 13);
															*(uint64_t *)(v30 + 24) = v38;
															*(uint64_t *)(v30 + 16) = (uint64_t)&v89[*(signed int *)(v31 + 25) + (signed int)v38 + v37];
															v30 += 16;
															v31 += 29;
															goto LABEL_37;
														}
													}
													else
													{
														switch (v34)
														{
														case 117:
															v48 = *(uint32_t *)(v31 + 1);
															goto LABEL_99;
														case 123:
															v48 = *(uint32_t *)(v31 + 5);
															v49 = *(signed int *)(v31 + 1);
															goto LABEL_101;
														case 151:
															v50 = *(uint32_t *)(v31 + 9) + *(uint32_t *)&v89[*(signed int *)(v31 + 5)];
															v51 = *(signed int *)(v31 + 1);
															goto LABEL_103;
														}
													}
												}
												else if (v34 <= 53)
												{
													switch (v34)
													{
													case 14:
														v32 = (signed __int64)(v31 + 1);
														v87 = v31 + 1;
														if ((unsigned int)(*(uint32_t *)(v31 + 5) + *(uint32_t *)&v89[*(signed int *)(v31 + 1)]) > **(uint32_t **)v30)
														{
															v31 += 13;
															goto LABEL_57;
														}
														v33 = *(signed int *)(v31 + 9);
														goto LABEL_56;
													case 40:
														*(uint64_t *)(v30 + 8) = (uint64_t)&v89[*(signed int *)(v31 + 1)];
														*(uint64_t *)(v30 + 16) = *(signed int *)&v89[*(signed int *)(v31 + 13)]
															* *(uint64_t *)(v31 + 5);
														v30 += 16;
														v31 += 17;
														goto LABEL_37;
													case 44:
														goto def_1019EF460;
													}
												}
												else
												{
													switch (v34)
													{
													case 54:
														v87 = v31 + 1;
														v41 = *(uint64_t *)(v31 + 13) * *(uint64_t *)(v31 + 21);
														v42 = v41 + *(uint64_t *)(v31 + 5);
														*(uint64_t *)(v30 + 16) = v42;
														*(uint64_t *)(v30 + 24) = v41;
														v43 = *(uint32_t *)(v31 + 1);
														goto LABEL_96;
													case 56:
														v87 = v31 + 1;
														v44 = *(uint64_t *)(v31 + 13) * *(uint64_t *)(v31 + 21);
														v45 = v44 + *(uint64_t *)(v31 + 5);
														*(uint64_t *)(v30 + 16) = v45;
														*(uint64_t *)(v30 + 24) = v44;
														*(uint64_t *)&v89[*(signed int *)(v31 + 1)] = (uint64_t)&v89[*(signed int *)(v31 + 29)
															+ (signed int)v45];
														goto LABEL_97;
													case 57:
														v31 += *(signed int *)(v31 + 1) + 1;
														goto LABEL_37;
													}
												}
											}
											if (v34 > 208)
												break;
											if (v34 <= 188)
											{
												if (v34 == 172)
												{
													v87 = v31 + 1;
													if (*(uint32_t*)(v30 - 8) <= **(uint32_t **)v30)
														v31 += 5;
													else
														v31 += *(signed int *)(v31 + 1) + 1;
													v87 = v31;
													v30 -= 16;
												}
												else if (v34 == 178)
												{
													v87 = v31 + 1;
													v35 = *(uint64_t *)(v31 + 9) * *(uint64_t *)(v31 + 17);
													v36 = v35 + *(uint64_t *)(v31 + 1);
													*(uint64_t *)(v30 + 8) = v36;
													*(uint64_t *)(v30 + 16) = v35;
													*(uint32_t *)&v89[*(signed int *)(v31 + 29)] = *(uint32_t *)&v89[*(signed int *)(v31 + 25)
														+ (signed int)v36];
													goto LABEL_97;
												}
											}
											else
											{
												switch (v34)
												{
												case 189:
													v87 = v31 + 1;
													**(uint64_t **)(v30 - 16) = **(uint64_t **)v30 + *(uint64_t *)(v30 - 8);
													v30 -= 24;
													v31 = v87;
													break;
												case 204:
													v87 = v31 + 1;
													v46 = *(uint64_t *)(v31 + 13) * *(uint64_t *)(v31 + 21);
													v42 = v46 + *(uint64_t *)(v31 + 5);
													*(uint64_t *)(v30 + 16) = v42;
													*(uint64_t *)(v30 + 24) = v46;
													v43 = *(uint32_t *)&v89[*(signed int *)(v31 + 1)];
												LABEL_96:
													*(uint32_t *)&v89[*(signed int *)(v31 + 29) + (signed int)v42] = v43;
												LABEL_97:
													v31 += 33;
													goto LABEL_37;
												case 207:
													v87 = v31 + 1;
													v47 = *(uint32_t **)v30;
													v30 -= 8;
													v48 = *v47 - *(uint32_t *)&v89[*(signed int *)(v31 + 1)];
												LABEL_99:
													v49 = *(signed int *)(v31 + 5);
												LABEL_101:
													*(uint32_t *)&v89[v49] = v48;
													goto LABEL_105;
												}
											}
										}
										if (v34 <= 220)
											break;
										switch (v34)
										{
										case 252:
											v87 = v31 + 1;
											v52 = *(uint32_t*)(v30 - 8);
											v53 = *(uint32_t **)v30;
											v30 -= 16;
											*v53 = v52;
											v50 = *(uint32_t *)(v31 + 1) + *(uint32_t *)&v89[*(signed int *)(v31 + 5)];
											v51 = *(signed int *)(v31 + 9);
										LABEL_103:
											*(uint32_t *)&v89[v51] = v50;
										LABEL_104:
											v31 += 13;
											goto LABEL_37;
										case 236:
											v32 = (signed __int64)(v31 + 1);
											v87 = v31 + 1;
											if (*(uint32_t *)&v89[*(signed int *)(v31 + 1)] >= **(uint32_t **)v30)
											{
												v31 += 9;
												goto LABEL_57;
											}
											v33 = *(signed int *)(v31 + 5);
										LABEL_56:
											v31 = (char *)(v32 + v33);
										LABEL_57:
											v87 = v31;
											v30 -= 8;
											break;
										case 221:
											*(uint32_t *)(v30 + 8) = *(uint32_t *)(v31 + 5) + *(uint32_t *)&v89[*(signed int *)(v31 + 1)];
											v30 += 8;
										LABEL_105:
											v31 += 9;
											goto LABEL_37;
										}
									}
									if (v34 == 209)
									{
										v87 = v31 + 1;
										sub_1019F115C((char*)v89, (uint32_t **)&v87);
										v31 = v87 + 4;
										goto LABEL_37;
									}
								} while (v34 != 219);
								v87 = v31 + 1;
								v39 = *(uint32_t *)(v31 + 1);
								if (v39)
								{
									if (v39 == 1)
									{
										v40 = (__int64 *)&v72;
										goto LABEL_108;
									}
									v30 += 8;
								}
								else
								{
									v40 = &v73;
								LABEL_108:
									*(uint64_t *)(v30 + 8) = (uint64_t)v40;
									v30 += 8;
								}
								v31 += 5;
							}
						}
						if (v54 == 174)
						{
							v55 = *(__int64 **)v7;
							v7 -= 8;
							*(uint64_t *)*v55 = *(uint64_t *)&v75[*(signed int *)(v8 + 1)];
							v75[*(signed int *)(v8 + 9)] = v75[*(signed int *)(v8 + 5)];
							v8 += 13;
						}
					}
				}
				if (v54 > 143)
					break;
				if (v54 == 137)
				{
					++v8;
					v10 = **(__int64 ***)v7;
				LABEL_13:
					**(uint64_t **)(v7 - 8) = *(unsigned int *)v10;
					goto LABEL_30;
				}
				if (v54 == 141)
					v8 += *(signed int *)(v8 + 1) + 1;
			}
			if (v54 != 144)
				break;
			*(uint64_t *)&v75[*(signed int *)(v8 + 1)] = *(uint64_t *)&v75[*(signed int *)(v8 + 5)];
			*(uint64_t *)(v7 + 8) = (uint64_t)&v75[*(signed int *)(v8 + 9)];
			v7 += 8;
			v8 += 13;
		}
	} while (v54 != 148);

	de = de_buf;
	*deLen = el;
}

uint32_t sub_1019F115C(char* result, uint32_t **a2)
{
	char* v2 = result;
	uint32_t ret = *(uint32_t*)result;
	uint32_t *v3; // x0
	__int64 v4; // x2
	int v5; // w1

	switch (**a2)
	{
	case 1:
		ret = sub_1019EFF08(*(uint32_t *)(result + 32));
		*(uint32_t *)(v2 + 36) = ret;
		break;
	case 2:
		ret = sub_1019F1204(*(uint32_t *)(result + 40));
		*(uint32_t *)(v2 + 44) = ret;
		break;
	case 3:
		ret = sub_1019F28DC(*(uint32_t *)(result + 48));
		*(uint32_t *)(v2 + 52) = ret;
		break;
	case 4:
		v3 = *(uint32_t **)(result + 56);
		v4 = *(uint64_t *)(v2 + 64);
		v5 = 12;
		goto LABEL_8;
	case 5:
		v3 = *(uint32_t **)(result + 72);
		v5 = *(uint32_t *)(v2 + 80);
		v4 = *(uint64_t *)(v2 + 88);
	LABEL_8:
		ret = sub_1019F1438(v3, v5, v4);
		break;
	default:
		return ret;
	}
	return ret;
}

uint32_t sub_1019F1438(uint32_t *result, int a2, __int64 a3)
{
	char *v3; // x23
	char *v4; // x24
	int v5; // w8
	int v6; // t1
	char *v7; // x8
	int v8; // w9
	int v9; // w8
	int v10; // t1
	int v11; // w8
	uint64_t v12; // t1
	unsigned int v13; // w8
	int v14; // w8
	int v15; // t1
	int v16; // w8
	char* v17; // x8
	uint64_t v18; // x8
	int v19; // w8
	int v20; // t1
	int v21; // w8
	int v22; // w9
	uint64_t v23; // t1
	uint64_t v24; // x8
	char *v25; // x8
	int v26; // w9
	uint64_t v27; // x9
	int v28; // w8
	__int64 v29; // x10
	int v30; // w8
	unsigned int v31; // w8
	int v32; // t1
	int v33; // w8
	int v34; // t1
	uint32_t v35; // t1
	int v36; // w8
	int v37; // w8
	int v38; // w9
	int v39; // t1
	int v40; // w8
	int v41; // w8
	int v42; // w9
	char *v43; // x9
	uint64_t v44; // x8
	int v45; // w8
	int v46; // w8
	int v47; // t1
	char *v48; // x9
	int v49; // w8
	int v50; // t1
	int v51; // w8
	int v52; // w8
	int v53; // w9
	int v54; // w8
	uint64_t v55; // x8
	int v56; // w9
	int v57; // t1
	int v58; // w8
	int v59; // w8
	uint32_t v60; // w8
	int v61; // t1
	int v62; // w8
	uint32_t v63; // t1
	int v64; // w8
	int v65; // t1
	int v66; // w8
	int v67; // t1
	uint64_t v68; // t1
	int v69; // w8
	int v70; // w8
	int v71; // w8
	int v72; // t1
	int v73; // t1
	int v74; // w8
	int v75; // w8
	signed int v76; // w8
	__int64 v77; // [xsp+8h] [xbp-2F8h]
	int v78; // [xsp+14h] [xbp-2ECh]
	uint32_t *v79; // [xsp+18h] [xbp-2E8h]
	char v80[0x104] = { 0x00 }; // [xsp+20h] [xbp-2E0h]
	char v81[0x1c0] = { 0x00 }; // [xsp+124h] [xbp-1DCh]
	

	uint32_t ret = *result;
	v79 = result;
	v78 = a2;
	v77 = a3;
	
	v3 = (char*)byte_103572640;
	v4 = (char *)v80;

	unsigned char byte_1035738F8[40] = { 0x00 };
	*((uint64_t*)byte_1035738F8) = 0xaaaaaaaa0000000b;
	*((uint64_t*)byte_1035738F8 + 1) = 0xcccccccc55555555;
	*((uint64_t*)byte_1035738F8 + 2) = 0xf0f0f0f033333333;
	*((uint64_t*)byte_1035738F8 + 3) = 0xcc33aa550f0f0f0f;
	*((uint64_t*)byte_1035738F8 + 4) = 0x000000000001f00f;
	uint64_t p_byte_1035738F8 = (uint64_t)&byte_1035738F8;

	unsigned char byte_103786138[136] = { 0x0 };
	*((uint64_t*)byte_103786138) = 0x000000000000b1b1;
	*((uint64_t*)byte_103786138 + 1) = 0x0e00080d02090a04;
	*((uint64_t*)byte_103786138 + 2) = 0x03050f070c010b06;
	*((uint64_t*)byte_103786138 + 3) = 0x0a0f0d060c040b0e;
	*((uint64_t*)byte_103786138 + 4) = 0x0905070001080302;
	*((uint64_t*)byte_103786138 + 5) = 0x0204030a0d010805;
	*((uint64_t*)byte_103786138 + 6) = 0x0b090006070c0f0e;
	*((uint64_t*)byte_103786138 + 7) = 0x0f090800010a0d07;
	*((uint64_t*)byte_103786138 + 8) = 0x0305020b0c06040e;
	*((uint64_t*)byte_103786138 + 9) = 0x080d0f0501070c06;
	*((uint64_t*)byte_103786138 + 10) = 0x020b03000e090a04;
	*((uint64_t*)byte_103786138 + 11) = 0x0d010207000a0b04;
	*((uint64_t*)byte_103786138 + 12) = 0x0e0f0c0905080603;
	*((uint64_t*)byte_103786138 + 13) = 0x09050f0301040b0d;
	*((uint64_t*)byte_103786138 + 14) = 0x0c020806070e0a00;
	*((uint64_t*)byte_103786138 + 15) = 0x040a0705000d0f01;
	*((uint64_t*)byte_103786138 + 16) = 0x0c080b060e030209;
	uint64_t p_byte_103786138 = (uint64_t)&byte_103786138;


	while (1)
	{
		while (1)
		{
			v76 = (unsigned __int8)*v3;
			//printf("\nsub_1019F1438: %02x_%d diff: %04x", v76, v76, (uint64_t)v3-(uint64_t)(char*)byte_103572640);
 			if (v76 <= 48)
				break;
			switch (v76)
			{
			case 49:
				if (*(uint32_t *)(v4 - 8) >= **(uint32_t **)v4)
					v3 += 5;
				else
					v3 += *(signed int *)(v3 + 1) + 1;
				goto LABEL_131;
			case 50:
				*(uint32_t *)&v81[*(signed int *)(v3 + 1)] = *(uint32_t *)v4;
				v13 = *(uint32_t *)&v81[*(signed int *)(v3 + 5)];
				goto LABEL_115;
			case 51:
				v14 = *(uint32_t *)(**(uint64_t **)v4 + *(signed int *)(v3 + 1) * *(uint64_t *)(v3 + 5)) << *(uint32_t *)(v3 + 13);
				v15 = *(uint32_t *)(v4 - 8);
				v4 -= 8;
				v16 = v14 ^ v15;
				goto LABEL_123;
			case 53:
				*(uint32_t *)v4 = *(uint8_t*)(**(uint64_t **)v4 + *(signed int *)&v81[*(signed int *)(v3 + 1)] * *(uint64_t *)(v3 + 5));
				v4 += 8;
				v16 = *(uint32_t *)(v3 + 13);
				goto LABEL_123;
			case 60:
			case 223:
				v5 = *(uint32_t *)&v81[*(signed int *)(v3 + 1)];
				goto LABEL_11;
			case 61:
				*(uint32_t *)(**(uint64_t**)v4 + *(signed int *)(v3 + 1) * *(uint64_t *)(v3 + 5)) = *(uint32_t *)(v4 - 8);
				*((uint32_t *)v4 - 2) = *(uint32_t *)&v81[*(signed int *)(v3 + 13)];
				goto LABEL_64;
			case 63:
				v17 = v3 + 1;
				if (*(uint32_t *)&v81[*(signed int *)(v3 + 1)] == *(uint32_t *)(v3 + 5))
					goto LABEL_119;
				goto LABEL_89;
			case 64:
				*(uint32_t *)&v81[*(signed int *)(v3 + 1)] = *(uint32_t *)v4;
				*(uint32_t *)v4 = (*(uint32_t *)(v3 + 9) ^ *(uint32_t *)&v81[*(signed int *)(v3 + 13)]) | *(uint32_t *)&v81[*(signed int *)(v3 + 5)];
				v4 += 8;
				v18 = (uint64_t)((char*)v81 + *(signed int *)(v3 + 17));
				goto LABEL_98;
			case 66:
				v3 += 1;
				v19 = **(uint32_t **)v4;
				v20 = *(uint32_t *)(v4 - 8);
				v4 -= 8;
				*(uint32_t *)v4 = v20 ^ v19;
				continue;
			case 69:
				v21 = *(uint32_t *)&v81[*(signed int *)(v3 + 1)] << *(uint32_t *)(v3 + 5);
				goto LABEL_104;
			case 74:
				*(uint32_t *)&v81[*(signed int *)(v3 + 5)] = *(uint32_t *)&v81[*(signed int *)(v3 + 1)];
				*(uint32_t *)(v4 + 8) = *(uint32_t *)&v81[*(signed int *)(v3 + 9)];
				v4 += 8;
				goto LABEL_119;
			case 75:
				v17 = v3 + 1;
				v22 = *(uint32_t *)(v3 + 5) & *(uint32_t *)&v81[*(signed int *)(v3 + 1)];
				*(uint32_t *)(v4 + 8) = v22;
				if (!v22)
					goto LABEL_119;
				goto LABEL_89;
			case 78:
				return ret;
			case 86:
				v17 = v3 + 1;
				if (*(int *)&v81[*(signed int *)(v3 + 1)] < *(int *)(v3 + 5))
					goto LABEL_119;
				goto LABEL_89;
			case 87:
				v23 = **(uint64_t**)v4;
				v4 -= 8;
				*(uint32_t *)(v81 + *(signed int *)(v3 + 13)) = *(uint8_t*)(v23 + *(signed int *)&v81[*(signed int *)(v3 + 1)] * *(uint64_t *)(v3 + 5));
				v3 += 17;
				continue;
			case 88:
				*(uint32_t *)(v4 - 8) ^= *(uint32_t *)(**(uint64_t **)v4 + *(signed int *)(v3 + 1) * *(uint64_t *)(v3 + 5));
				v24 = (uint64_t)((char*)v81 + *(signed int *)(v3 + 13));
				goto LABEL_111;
			case 89:
				v25 = v4 - 8;
				v26 = *(uint32_t *)(v4 - 8) - *(uint8_t*)(**(uint64_t**)v4 + *(signed int *)&v81[*(signed int *)(v3 + 1)] * *(uint64_t *)(v3 + 5));
				goto LABEL_77;
			case 93:
				**(uint32_t **)v4 = *(uint32_t *)(v4 - 8);
				v27 = (uint64_t)(char*)v81;
				v28 = *(uint32_t *)(v3 + 5) + *(uint32_t *)&v81[*(signed int *)(v3 + 1)];
				v29 = *(signed int *)(v3 + 9);
				goto LABEL_45;
			case 94:
				*(uint32_t *)(v4 - 8) ^= **(uint32_t **)v4;
				*(uint64_t*)v4 = (uint64_t)((char*)v81 + *(signed int *)(v3 + 1));
				break;
			case 96:
				*(uint32_t *)((char*)v81 + *(signed int *)(v3 + 5)) = *(uint32_t *)((char*)v81 + *(signed int *)(v3 + 1));
				v30 = *(uint32_t *)((char*)v81 + *(signed int *)(v3 + 9));
				goto LABEL_82;
			case 97:
				v28 = *(uint32_t *)(v4 - 8);
				v27 = **(uint64_t**)v4;
				v29 = *(signed int *)(v3 + 1) * *(uint64_t *)(v3 + 5);
			LABEL_45:
				*(uint32_t *)(v27 + v29) = v28;
				goto LABEL_60;
			case 98:
				v3 += 1;
				*(uint32_t *)v4 = *(unsigned __int8 *)v4;
				continue;
			case 99:
				*(uint8_t *)v4 = *(uint8_t*)(**(uint64_t**)v4 + (*(signed int *)(v3 + 5) + (signed __int64)*(signed int *)&v81[*(signed int *)(v3 + 1)]) * *(uint64_t *)(v3 + 9));
				v3 += 17;
				continue;
			case 101:
				*(uint32_t *)(v4 - 16) ^= *(uint32_t *)(v4 - 8) ^ *(uint32_t *)(**(uint64_t**)v4 + *(signed int *)(v3 + 1) * *(uint64_t *)(v3 + 5));
				*(uint64_t*)(v4 - 8) = (uint64_t)(v81 + *(signed int *)(v3 + 13));
				v3 += 17;
				v4 -= 8;
				continue;
			case 103:
				*(uint32_t *)&v81[*(signed int *)(v3 + 5)] = *(uint32_t *)&v81[*(signed int *)(v3 + 1)];
				v3 += 9;
				continue;
			case 104:
				v31 = *(uint32_t *)(**(uint64_t**)v4 + *(signed int *)(v3 + 1) * *(uint64_t *)(v3 + 5));
				v32 = *(uint32_t *)(v4 - 8);
				v4 -= 8;
				v11 = v31 >> v32;
				goto LABEL_118;
			case 105:
				v33 = *(uint32_t *)(v4 - 8) >> *(uint32_t *)v4;
				*(uint32_t *)(v4 - 8) = v33;
				v34 = *(uint32_t *)(v4 - 16);
				v4 -= 16;
				*(uint8_t *)v4 = (*(uint32_t*)(v3 + 1) & v33) | v34;
				break;
			case 107:
				v35 = **(uint32_t**)v4;
				v4 -= 8;
				*(uint32_t *)&v81[*(signed int *)(v3 + 5)] = v35 - *(uint32_t *)(v3 + 1);
				v3 += 9;
				continue;
			case 109:
			case 172:
				v7 = v4 - 8;
				*(uint32_t *)(**(uint64_t**)v4 + *(signed int *)(v3 + 1) * *(uint64_t *)(v3 + 5)) = *(uint32_t *)(v4 - 8);
				v8 = *(uint32_t *)&v81[*(signed int *)(v3 + 13)];
				goto LABEL_54;
			case 111:
				v7 = v4 - 8;
				**(uint32_t **)v4 = *(uint32_t *)(v4 - 8);
				v8 = (*(uint32_t *)&v81[*(signed int *)(v3 + 9)] >> *(uint32_t *)(v3 + 13)) | (*(uint32_t *)&v81[*(signed int *)(v3 + 1)] << *(uint32_t *)(v3 + 5));
				goto LABEL_54;
			case 113:
				v36 = *(uint32_t *)(v3 + 5) + *(uint32_t *)&v81[*(signed int *)(v3 + 1)];
				goto LABEL_109;
			case 115:
				v37 = *(uint32_t *)(v4 - 8) ^ *(uint32_t *)v4 ^ *(uint32_t *)(v4 - 16);
				v39 = *(uint32_t *)(v4 - 24);
				v4 -= 24;
				v38 = v39;
				goto LABEL_79;
			case 116:
				v40 = *(uint32_t *)(v4 - 8) ^ **(uint32_t **)v4;
				*(uint32_t *)(v4 - 8) = v40;
				*(uint32_t *)&v81[*(signed int *)(v3 + 1)] = v40;
				*(uint32_t *)&v81[*(signed int *)(v3 + 13)] = *(uint32_t *)&v81[*(signed int *)(v3 + 5)] << *(uint32_t *)(v3 + 9);
				v4 -= 16;
				v3 += 17;
				continue;
			case 120:
				v41 = *(uint32_t *)(v4 - 8) ^ **(uint32_t **)v4;
				*(uint32_t *)&v81[*(signed int *)(v3 + 1)] = v41;
				v42 = *(uint32_t *)&v81[*(signed int *)(v3 + 5)];
				*(uint32_t *)(v4 - 8) = v41;
				*(uint32_t *)&v81[*(signed int *)(v3 + 9)] = v42;
				goto LABEL_60;
			case 125:
				*(uint8_t*)(**(uint64_t**)v4 + *(signed int *)&v81[*(signed int *)(v3 + 1)] * *(uint64_t *)(v3 + 5)) = *(uint8_t *)(v4 - 8);
			LABEL_60:
				v4 -= 16;
				goto LABEL_119;
			case 127:
				*(uint32_t *)&v81[*(signed int *)(v3 + 1)] = **(uint32_t **)v4;
				v43 = (char*)(*(uint64_t *)(v3 + 17) * *(uint64_t *)(v3 + 9));
				*(uint64_t*)v4 = (uint64_t)(v81 + *(signed int *)(v3 + 5));
				*(uint64_t*)(v4 + 8) = (uint64_t)v43;
				v44 = *(uint64_t*)(v3 + 25);
				*(uint64_t*)(v4 + 16) = v44;
				*(uint64_t*)(v4 + 8) = (uint64_t)((char *)v44 + (uint64_t)v43);
				v4 += 8;
				v3 += 33;
				continue;
			case 131:
			case 226:
				v12 = **(uint64_t**)v4;
				v4 -= 8;
				*(uint32_t *)&v81[*(signed int *)(v3 + 13)] = *(uint32_t *)(v12 + *(signed int *)(v3 + 1) * *(uint64_t *)(v3 + 5));
				v3 += 17;
				continue;
			case 132:
				*(uint32_t *)&v81[*(signed int *)(v3 + 1)] = *(uint32_t *)v4;
				*(uint32_t *)v4 = *(uint32_t *)&v81[*(signed int *)(v3 + 5)];
				v4 += 8;
				v11 = *(uint32_t *)(v3 + 9);
				goto LABEL_118;
			case 133:
			case 236:
				v5 = *(uint32_t *)(v3 + 1);
			LABEL_11:
				*(uint32_t *)(v4 + 8) = v5;
				v4 += 8;
				break;
			case 138:
				*(uint32_t *)&v81[*(signed int *)(v3 + 1)] = *(uint32_t *)v4;
				*(uint32_t *)&v81[*(signed int *)(v3 + 13)] = *(uint32_t *)&v81[*(signed int *)(v3 + 5)] ^ *(uint32_t *)&v81[*(signed int *)(v3 + 9)];
				goto LABEL_64;
			case 146:
				v11 = *(uint32_t *)(**(uint64_t**)v4 + *(signed int *)(v3 + 1) * *(uint64_t *)(v3 + 5));
				goto LABEL_118;
			case 148:
				*(uint32_t *)(v4 - 8) <<= *(uint32_t *)v4;
				*(uint32_t *)v4 = *(uint32_t *)&v81[*(signed int *)(v3 + 5)] >> *(uint32_t *)(v3 + 1);
				v45 = *(uint32_t *)&v81[*(signed int *)(v3 + 9)] << *(uint32_t *)(v3 + 13);
				goto LABEL_129;
			case 155:
				v3 += 1;
				v46 = *(uint32_t *)(v4 - 8) ^ *(uint32_t *)v4 ^ *(uint32_t *)(v4 - 16);
				v47 = *(uint32_t *)(v4 - 24);
				v4 -= 24;
				*(uint32_t *)v4 = v46 ^ v47;
				continue;
			case 156:
				v48 = v81;
				*(uint32_t *)&v48[*(signed int *)(v3 + 5)] = *(uint32_t *)&v48[*(signed int *)(v3 + 1)];
				*(uint32_t *)&v48[*(signed int *)(v3 + 13)] = *(uint32_t *)&v48[*(signed int *)(v3 + 9)];
				*(uint32_t *)(v4 + 8) = *(uint32_t *)(v3 + 17);
				v4 += 8;
				v3 += 21;
				continue;
			case 157:
				*(uint8_t *)(v4 + 8) = *(char *)(v81 + *(signed int *)(v3 + 1));
				v4 += 8;
				break;
			case 161:
				v49 = *(uint32_t *)(v4 - 8) ^ *(uint32_t *)v4;
				v50 = *(uint32_t *)(v4 - 16);
				v4 -= 16;
				v51 = v49 ^ v50;
				*(uint32_t *)v4 = v51;
				*(uint32_t *)&v81[*(signed int *)(v3 + 1)] = v51;
				v52 = *(uint32_t *)&v81[*(signed int *)(v3 + 9)];
				v53 = *(uint32_t *)&v81[*(signed int *)(v3 + 5)];
				goto LABEL_117;
			case 162:
				*(uint64_t *)&v81[*(signed int *)(v3 + 1)] = (*(uint64_t*)(v4 - 8) + *(signed int *)v4);
				goto LABEL_121;
			case 163:
				v54 = *(uint32_t *)(v3 + 1);
				if (v54)
				{
					if (v54 == 1)
					{
						v55 = (uint64_t)&v78;
					}
					else
					{
						if (v54 != 2)
							goto LABEL_127;
						v55 = (uint64_t)&v77;
					}
				}
				else
				{
					v55 = (uint64_t)&v79;
				}
				goto LABEL_135;
			case 165:
				v25 = v4 - 8;
				v56 = *(uint32_t *)(v4 - 8) << *(uint32_t *)v4;
				*(uint32_t *)(v4 - 8) = v56;
				v26 = *(uint32_t *)&v81[*(signed int *)(v3 + 9)] ^ v56 ^ (*(uint32_t *)&v81[*(signed int *)(v3 + 5)] >> *(uint32_t *)(v3 + 1));
			LABEL_77:
				*(uint32_t *)v25 = v26;
				v3 += 13;
				v4 = v25;
				continue;
			case 171:
				v37 = *(uint32_t *)(v4 - 8) ^ *(uint32_t *)v4;
				v57 = *(uint32_t *)(v4 - 16);
				v4 -= 16;
				v38 = v57;
			LABEL_79:
				v58 = v37 ^ v38;
				*(uint32_t *)v4 = v58;
				*(uint32_t *)&v81[*(signed int *)(v3 + 1)] = v58;
				v13 = *(uint32_t *)(v3 + 5);
				goto LABEL_115;
			case 174:
				v3 += *(signed int *)(v3 + 1) + 1;
				continue;
			case 179:
				*(uint32_t *)&v81[*(signed int *)(v3 + 5)] = *(uint32_t *)&v81[*(signed int *)(v3 + 1)];
				v30 = *(uint32_t *)(v3 + 9);
			LABEL_82:
				*(uint32_t *)&v81[*(signed int *)(v3 + 13)] = v30;
				v3 += 17;
				continue;
			case 182:
				v59 = **(uint32_t **)v4;
				goto LABEL_102;
			case 184:
				v36 = *(uint32_t *)(v3 + 1) ^ *(uint32_t *)&v81[*(signed int *)(v3 + 5)];
				goto LABEL_109;
			case 185:
				v61 = *(uint32_t *)v4;
				v4 -= 8;
				v60 = v61;
				goto LABEL_96;
			case 189:
				v11 = *(uint8_t*)(**(uint64_t**)v4 + *(signed int *)(v3 + 1) * *(uint64_t *)(v3 + 5));
				goto LABEL_118;
			case 190:
				*(uint32_t *)&v81[*(signed int *)(v3 + 5)] = *(uint32_t *)&v81[*(signed int *)(v3 + 1)];
				*(uint32_t *)(v4 + 8) = *(uint32_t *)&v81[*(signed int *)(v3 + 9)] ^ *(uint32_t *)&v81[*(signed int *)(v3 + 13)];
				*(uint64_t *)(v4 + 16) = (uint64_t)((char *)v81 + *(signed int *)(v3 + 17));
				v4 += 16;
				v3 += 21;
				continue;
			case 192:
				v17 = v3 + 1;
				if (*(uint32_t *)&v81[*(signed int *)(v3 + 1)] >= *(uint32_t *)(v3 + 5))
					goto LABEL_119;
			LABEL_89:
				v3 = (char *)(v17 + *(signed int *)(v3 + 9));
				continue;
			case 195:
				v62 = *(uint32_t *)(v3 + 1);
				if (v62)
				{
					if (v62 != 1)
					{
					LABEL_127:
						v4 += 8;
						break;
					}
					v55 = p_byte_1035738F8;
				}
				else
				{
					v55 = p_byte_103786138;
				}
			LABEL_135:
				*(uint64_t*)(v4 + 8) = v55;
				v4 += 8;
				break;
			case 197:
				v16 = *(uint32_t *)(**(uint64_t**)v4 + *(signed int *)(v3 + 1) * *(uint64_t *)(v3 + 5)) ^ *(uint32_t *)&v81[*(signed int *)(v3 + 13)];
				goto LABEL_123;
			case 198:
			case 208:
				v9 = *(uint8_t*)(**(uint64_t**)v4 + *(signed int *)&v81[*(signed int *)(v3 + 1)] * *(uint64_t *)(v3 + 5));
				v10 = *(uint32_t *)(v4 - 8);
				v4 -= 8;
				v11 = v9 ^ v10;
				goto LABEL_118;
			case 199:
				v55 = (uint64_t)((char*)v81 + *(signed int *)(v3 + 1));
				goto LABEL_135;
			case 201:
				v63 = ***(uint32_t***)v4;
				v4 -= 8;
				v60 = v63;
			LABEL_96:
				*(uint32_t *)&v81[*(signed int *)(v3 + 1)] = v60;
				break;
			case 205:
				*(uint32_t *)(**(uint64_t**)v4 + *(signed int *)(v3 + 1) * *(uint64_t *)(v3 + 5)) = *(uint32_t *)(v4 - 8);
				*(uint32_t *)(v4 - 8) = *(uint32_t *)&v81[*(signed int *)(v3 + 13)];
				v18 = (uint64_t)((char*)v81 + *(signed int *)(v3 + 17));
			LABEL_98:
				*(uint64_t*)v4 = v18;
				v3 += 21;
				continue;
			case 207:
				v64 = *(uint8_t*)(**(uint64_t**)v4 + *(signed int *)&v81[*(signed int *)(v3 + 1)] * *(uint64_t *)(v3 + 5));
				v65 = *(uint32_t *)(v4 - 8);
				v4 -= 8;
				v11 = v64 << v65;
				goto LABEL_118;
			case 212:
				v3 += 1;
				v66 = *(uint32_t *)v4;
				v67 = *(uint32_t *)(v4 - 8);
				v4 -= 8;
				*(uint8_t *)v4 = v67 ^ v66;
				continue;
			case 214:
				v59 = *(uint32_t *)v4;
			LABEL_102:
				*(uint32_t *)v4 = *(uint32_t *)(v3 + 1) & v59;
				break;
			case 215:
				v21 = *(uint32_t *)(v3 + 5) + *(uint32_t *)&v81[*(signed int *)(v3 + 1)];
			LABEL_104:
				*(uint32_t *)(v4 + 8) = v21;
				v4 += 8;
				v3 += 9;
				continue;
			case 221:
				v68 = *(uint64_t*)v4;
				v4 -= 8;
				*(uint64_t *)&v81[*(signed int *)(v3 + 1)] = (uint64_t)v68;
				break;
			case 225:
				*(uint32_t *)v4 = *(uint32_t *)&v81[*(signed int *)(v3 + 1)] >> *(uint32_t *)v4;
				*(uint32_t *)(v4 + 8) = *(uint32_t *)&v81[*(signed int *)(v3 + 5)];
				*(uint32_t *)(v4 + 16) = *(uint32_t *)(v3 + 9);
				v4 += 16;
				goto LABEL_119;
			case 227:
				v69 = *(uint32_t *)(v4 - 8) ^ **(uint32_t **)v4;
				*(uint32_t *)(v4 - 8) = v69;
				*(uint32_t *)&v81[*(signed int *)(v3 + 1)] = v69;
				*(uint32_t *)(v4 - 8) = *(uint32_t *)&v81[*(signed int *)(v3 + 5)];
				*(uint32_t *)v4 = *(uint32_t *)&v81[*(signed int *)(v3 + 9)];
				v45 = *(uint32_t *)&v81[*(signed int *)(v3 + 13)];
				goto LABEL_129;
			case 230:
				v36 = *(uint32_t *)&v81[*(signed int *)(v3 + 1)] - *(uint32_t *)(v3 + 5);
			LABEL_109:
				*(uint32_t *)&v81[*(signed int *)(v3 + 9)] = v36;
				goto LABEL_119;
			case 231:
				v70 = *(uint32_t *)(v4 - 8) << *(uint32_t *)v4;
				*(uint32_t *)(v4 - 8) = v70;
				*(uint32_t *)(v4 - 8) = *(uint32_t *)&v81[*(signed int *)(v3 + 9)] ^ v70 ^ (*(uint32_t *)&v81[*(signed int *)(v3 + 5)] >> *(uint32_t *)(v3 + 1));
				v24 = (uint64_t)((char*)v81 + *(signed int *)(v3 + 13));
			LABEL_111:
				*(uint64_t*)v4 = v24;
				v3 += 17;
				continue;
			case 233:
				v3 += 1;
				*(uint8_t *)v4 = *(uint32_t *)v4;
				continue;
			case 234:
				***(uint32_t ***)v4 = *(uint32_t *)(v4 - 8);
				*(uint32_t *)(v4 - 8) = *(uint32_t *)&v81[*(signed int *)(v3 + 1)];
				v3 += 5;
				v4 -= 8;
				continue;
			case 247:
				v71 = *(uint32_t *)v4 | *(uint32_t *)(v4 - 8);
				*(uint32_t *)(v4 - 8) = v71;
				v72 = *(uint32_t *)(v4 - 16);
				v4 -= 16;
				v13 = ((*(uint32_t *)&v81[*(signed int *)(v3 + 1)] ^ v71) >> *(uint32_t *)(v3 + 5)) | v72;
			LABEL_115:
				*(uint32_t *)v4 = v13;
				v3 += 9;
				continue;
			case 249:
				v52 = *(uint32_t *)(**(uint64_t**)v4 + *(signed int *)(v3 + 1) * *(uint64_t *)(v3 + 5));
				v73 = *(uint32_t *)(v4 - 8);
				v4 -= 8;
				v53 = v73;
			LABEL_117:
				v11 = v53 ^ v52;
			LABEL_118:
				*(uint32_t *)v4 = v11;
				goto LABEL_119;
			case 251:
				v74 = *(uint32_t *)(v4 - 8) ^ **(uint32_t **)v4;
				*(uint32_t *)(v4 - 8) = v74;
				*(uint32_t *)&v81[*(signed int *)(v3 + 1)] = v74;
			LABEL_121:
				v4 -= 16;
				break;
			case 254:
				*(uint32_t *)&v81[*(signed int *)(v3 + 1)] = *(uint32_t *)v4;
				v16 = *(uint32_t *)&v81[*(signed int *)(v3 + 9)] ^ *(uint32_t *)&v81[*(signed int *)(v3 + 13)] ^ *(uint32_t *)&v81[*(signed int *)(v3 + 5)];
			LABEL_123:
				*(uint32_t *)v4 = v16;
				v3 += 17;
				continue;
			default:
				continue;
			}
		def_1019F15D4:
			v3 += 5;
		}
		switch (v76)
		{
		case 10:
			*(uint32_t *)(v4 - 16) ^= *(uint32_t *)(v4 - 8) ^ *(uint32_t *)v4;
			*(uint64_t*)(v4 - 8) = (uint64_t)((char*)v81 + *(signed int *)(v3 + 1));
			v3 += 5;
			v4 -= 8;
			break;
		case 11:
		case 12:
		case 14:
		case 15:
		case 16:
		case 17:
		case 19:
		case 21:
		case 22:
		case 24:
			continue;
		case 13:
			switch (*(uint32_t *)(v3 + 1))
			{
			case 1:
				*(uint8_t*)(v81 + 0x1d) = __rbit(*(uint8_t*)(v81+0x1c)) >> 24;
				break;
			case 2:
				**(uint64_t**)(v81 + 0x28) = **(uint64_t**)(v81 + 0x38);
				break;
			case 3:
				ret = sub_1019F3238(*(uint32_t*)(v81 + 0x4c));
				*(uint32_t*)(v81 + 0x50) = ret;
				break;
			case 4:
				ret = sub_1019F3238(*(uint32_t*)(v81 + 0x54));
				*(uint32_t*)(v81 + 0x5c) = ret;
				break;
			case 5:
				ret = sub_1019F3238(*(uint32_t*)(v81 + 0x64));
				*(uint32_t*)(v81 + 0x68) = ret;
				break;
			case 6:
				ret = sub_1019F4694(*(uint32_t*)(v81 + 0x6c));
				*(uint32_t*)(v81 + 0x70) = ret;
				break;
			case 7:
				ret = sub_1019F4694(*(uint32_t*)(v81 + 0x74));
				*(uint32_t*)(v81 + 0x78) = ret;
				break;
			case 8:
				ret = sub_1019F4694(*(uint32_t*)(v81 + 0x7c));
				*(uint32_t*)(v81 + 0x80) = (signed int)ret;
				break;
			case 9:
				ret = sub_1019F4694(*(uint32_t*)(v81 + 0x90));
				*(uint32_t*)(v81 + 0x98) = ret;
				break;
			case 0xA:
				ret = sub_1019F4694(*(uint32_t*)(v81 + 0x9c));
				*(uint32_t*)(v81 + 0xa4) = ret;
				break;
			case 0xB:
				ret = sub_1019F4694(*(uint32_t*)(v81 + 0xa8));
				*(uint32_t*)(v81 + 0xb0) = ret;
				break;
			case 0xC:
				ret = sub_1019F3238(*(uint32_t*)(v81 + 0xb4));
				*(uint32_t*)(v81 + 0xb8) = ret;
				break;
			case 0xD:
				ret = sub_1019F3238(*(uint32_t*)(v81 + 0xbc));
				*(uint32_t*)(v81 + 0xc4) = ret;
				break;
			case 0xE:
				ret = sub_1019F3238(*(uint32_t*)(v81 + 0xcc));
				*(uint32_t*)(v81 + 0xd0) = ret;
				break;
			case 0xF:
				ret = sub_1019F3238(*(uint32_t*)(v81 + 0xf8));
				*(uint32_t*)(v81 + 0xfc) = ret;
				break;
			case 0x10:
				ret = sub_1019F3238(*(uint32_t*)(v81 + 0x100));
				*(uint32_t*)(v81 + 0x108) = ret;
				break;
			case 0x11:
				ret = sub_1019F3238(*(uint32_t*)(v81 + 0x110));
				*(uint32_t*)(v81 + 0x114) = ret;
				break;
			case 0x12:
				ret = sub_1019F4694(*(uint32_t*)(v81 + 0x118));
				*(uint32_t*)(v81 + 0x11c) = ret;
				break;
			case 0x13:
				ret = sub_1019F4694(*(uint32_t*)(v81 + 0x120));
				*(uint32_t*)(v81 + 0x124) = ret;
				break;
			case 0x14:
				ret = sub_1019F4694(*(uint32_t*)(v81 + 0x128));
				*(uint32_t*)(v81 + 0x12c) = ret;
				break;
			case 0x15:
				ret = sub_1019F2AC4(*(uint32_t*)(v81 + 0x134));
				*(uint32_t*)(v81 + 0x13c) = ret;
				break;
			case 0x16:
				ret = sub_1019F2AC4(*(uint32_t*)(v81 + 0x140));
				*(uint32_t*)(v81 + 0x148) = ret;
				break;
			case 0x17:
				ret = sub_1019F2AC4(*(uint32_t*)(v81 + 0x14c));
				*(uint32_t*)(v81 + 0x154) = ret;
				break;
			case 0x18:
				ret = sub_1019F2AC4(*(uint32_t*)(v81 + 0x158));
				*(uint32_t*)(v81 + 0x160) = ret;
				break;
			case 0x19:
				ret = sub_1019F2AC4(*(uint32_t*)(v81 + 0x164));
				*(uint32_t*)(v81 + 0x16c) = ret;
				break;
			case 0x1A:
				ret = sub_1019F2AC4(*(uint32_t*)(v81 + 0x170));
				*(uint32_t*)(v81 + 0x178) = ret;
				break;
			case 0x1B:
				ret = sub_1019F2AC4(*(uint32_t*)(v81 + 0x17c));
				*(uint32_t*)(v81 + 0x184) = ret;
				break;
			case 0x1C:
				ret = sub_1019F2AC4(*(uint32_t*)(v81 + 0x188));
				*(uint32_t*)(v81 + 0x190) = ret;
				break;
			default:
				goto def_1019F15D4;
			}
			goto def_1019F15D4;
		case 18:
			*(uint32_t *)&v81[*(signed int *)(v3 + 5)] = *(uint32_t *)&v81[*(signed int *)(v3 + 1)];
			*(uint32_t *)(v4 + 8) = *(uint32_t *)&v81[*(signed int *)(v3 + 9)] ^ *(uint32_t *)&v81[*(signed int *)(v3 + 13)];
			v4 += 8;
			v3 += 17;
			break;
		case 20:
			if (*(uint32_t *)(v4 - 8) == (**(uint32_t **)v4 - *(uint32_t *)(v3 + 1)))
				v3 += *(signed int *)(v3 + 5) + 1;
			else
				v3 += 9;
		LABEL_131:
			v4 -= 16;
			break;
		case 23:
			if (**(uint32_t **)v4 == *(uint64_t *)(v3 + 9) * *(uint64_t *)(v3 + 1))
				v3 += *(signed int *)(v3 + 17) + 1;
			else
				v3 += 21;
			v4 -= 8;
			break;
		case 25:
			v7 = v4 - 8;
			*(uint8_t*)(**(uint64_t**)v4 + *(signed int *)&v81[*(signed int *)(v3 + 1)] * *(uint64_t *)(v3 + 5)) = *(uint8_t *)(v4 - 8);
			v8 = *(uint32_t *)(v3 + 13);
		LABEL_54:
			*(uint32_t *)v7 = v8;
			v3 += 17;
			v4 = v7;
			break;
		case 26:
			*(uint32_t *)v4 = *(uint32_t *)(**(uint64_t**)v4 + *(signed int *)(v3 + 1) * *(uint64_t *)(v3 + 5)) << *(uint32_t *)(v3 + 13);
			v4 += 8;
		LABEL_64:
			*(uint32_t *)v4 = *(uint32_t *)(v3 + 17);
			v3 += 21;
			break;
		default:
			if (v76 == 3)
			{
				v75 = *(uint32_t *)(v4 - 8) ^ **(uint32_t **)v4;
				*(uint32_t *)(v4 - 8) = v75;
				*(uint32_t *)(v4 - 8) = v75 << *(uint32_t *)(v3 + 1);
				*(uint32_t *)v4 = *(uint32_t *)&v81[*(signed int *)(v3 + 5)];
				v45 = *(uint32_t *)(v3 + 9) ^ *(uint32_t *)&v81[*(signed int *)(v3 + 13)];
			LABEL_129:
				*((uint32_t *)v4 + 2) = v45;
				v4 += 8;
				v3 += 17;
			}
			else if (v76 == 4)
			{
				v6 = *(uint32_t *)v4;
				v4 -= 8;
				*(uint32_t *)&v81[*(signed int *)(v3 + 1)] = v6;
				*(uint32_t *)&v81[*(signed int *)(v3 + 9)] = *(uint32_t *)&v81[*(signed int *)(v3 + 5)];
			LABEL_119:
				v3 += 13;
			}
			break;
		}
	}

}

uint32_t sub_1019F3238(uint32_t a1)
{
	char *v1; // x9
	char *v2; // x12
	int v3; // w14
	int v4; // w15
	__int64 v5; // x15
	__int64 v6; // x15
	unsigned int v7; // w14
	int v8; // w15
	unsigned int v9; // w14
	signed int v10; // w14
	uint64_t v11; // x14
	__int64 v12; // t1
	int v14; // [xsp+Ch] [xbp-124h]
	char v15[0x100] = { 0x00 }; // [xsp+10h] [xbp-120h]
	char v16[0x100] = { 0x00 }; // [xsp+110h] [xbp-20h]
	
	unsigned char xmmword_1035738FC[40] = { 0x00 };
	*((uint64_t*)xmmword_1035738FC) = 0x55555555aaaaaaaa;
	*((uint64_t*)xmmword_1035738FC + 1) = 0x33333333cccccccc;
	*((uint64_t*)xmmword_1035738FC + 2) = 0x0f0f0f0ff0f0f0f0;
	*((uint64_t*)xmmword_1035738FC + 3) = 0x0001f00fcc33aa55;
	uint64_t p_xmmword_1035738FC = (uint64_t)&xmmword_1035738FC;
	
	v1 = (char*)byte_1035734C0;
	v14 = a1;
	v2 = (char*)v15;
	do
	{
		while (1)
		{
			while (1)
			{
				while (1)
				{
					v10 = (unsigned __int8)*v1;
					//printf(" sub_1019F3238: %x_%d", v10, v10);
					if (v10 > 167)
						break;
					if (v10 <= 34)
					{
						if (v10 == 20)
						{
							*(uint32_t *)(v2 + 8) = *(uint32_t *)(v1 + 1);
							v6 = *(uint64_t *)(v1 + 21) * *(uint64_t *)(v1 + 13);
							*(uint64_t *)(v2 + 16) = v6 + *(uint64_t *)(v1 + 5);
							*(uint64_t *)(v2 + 24) = v6;
							v2 += 16;
							v1 += 29;
						}
						else if (v10 == 28)
						{
							v2 += 8;
							if (!*(uint32_t *)(v1 + 1))
								*(uint64_t *)v2 = p_xmmword_1035738FC;
						LABEL_13:
							v1 += 5;
						}
					}
					else
					{
						switch (v10)
						{
						case 35:
							v1 += *(signed int *)(v1 + 1) + 1;
							break;
						case 105:
							v2 += 8;
							if (!*(uint32_t *)(v1 + 1))
								*(uint64_t *)v2 = (uint64_t)&v14;
							goto LABEL_13;
						case 131:
							++v1;
							v11 = *(uint64_t *)v2;
							v12 = *(uint64_t *)(v2 - 8);
							v2 -= 8;
							*(uint64_t *)v2 = (uint64_t)(v11 + v12);
							break;
						}
					}
				}
				if (v10 > 211)
					break;
				if (v10 == 168)
				{
					v7 = *(uint32_t *)(*(uint64_t *)v2 + *(signed int *)(v2 - 8));
					v8 = *(uint32_t *)&v16[*(signed int *)(v1 + 1)];
					*(uint32_t *)(v2 - 8) = v7;
					v9 = ((v8 & v7) >> *(uint32_t *)(v1 + 5)) | *(uint32_t *)(v2 - 16);
					*(uint32_t *)(v2 - 16) = v9;
					*(uint32_t *)&v16[*(signed int *)(v1 + 9)] = v9;
					v2 -= 24;
					v1 += 13;
				}
				else if (v10 == 196)
				{
					v3 = *(uint32_t *)(*(uint64_t *)v2 + *(signed int *)(v2 - 8));
					v4 = *(uint32_t *)&v16[*(signed int *)(v1 + 1)];
					*(uint32_t *)(v2 - 8) = v3;
					*(uint32_t *)(v2 - 16) = (v4 & v3) << *(uint32_t *)(v2 - 16);
					*(uint64_t *)(v2 - 8) = *(uint64_t *)(v1 + 5);
					*(uint64_t *)v2 = *(uint64_t *)(v1 + 21) * *(uint64_t *)(v1 + 13);
					v1 += 29;
				}
			}
			if (v10 == 229)
			{
				*(uint32_t *)(v2 + 8) = *(uint32_t *)&v16[*(signed int *)(v1 + 1)];
				v2 += 8;
				goto LABEL_13;
			}
			if (v10 != 236)
				break;
			*(uint32_t *)&v16[*(signed int *)(v1 + 1)] = **(uint32_t **)v2;
			*(uint32_t *)v2 = *(uint32_t *)(v1 + 5);
			v5 = *(uint64_t *)(v1 + 25) * *(uint64_t *)(v1 + 17);
			*(uint64_t *)(v2 + 8) = v5 + *(uint64_t *)(v1 + 9);
			*(uint64_t *)(v2 + 16) = v5;
			v2 += 8;
			v1 += 33;
		}
	} while (v10 != 212);
	return *(uint32_t *)v2;
}

//ﾗﾖｽﾚｷｴﾗｪ
uint32_t sub_1019F4694(uint32_t a1)
{
	char *v1; // x9
	char *v2; // x12
	unsigned int v3; // w13
	int v4; // w13
	int v5; // w13
	uint32_t *v6; // t1
	signed int v7; // w13
	int v8; // w13
	int v10; // [xsp+Ch] [xbp-124h]
	char v11[0x100] = { 0x00 }; // [xsp+10h] [xbp-120h]
	char v12[0x100] = { 0x00 }; // [xsp+110h] [xbp-20h]

	v10 = a1;
	

	v1 = (char*)byte_103571E78;
	v2 = (char*)v11;
	do
	{
		while (1)
		{
			while (1)
			{
				v7 = (unsigned __int8)*v1;
				//printf("sub_1019F4694: %x_%d  ", v7, v7);
				if (v7 <= 110)
					break;
				if (v7 <= 157)
				{
					if (v7 == 111)
					{
						++v1;
						*(uint32_t *)(v2 - 24) |= (*(uint32_t *)(v2 - 8) & **(uint32_t **)v2) << *(uint32_t *)(v2 - 16);
						v2 -= 24;
					}
					else if (v7 == 117)
					{
						v3 = *(uint32_t *)(v2 - 8) & **(uint32_t **)v2;
						*(uint32_t *)(v2 - 8) = v3;
						*(uint32_t *)(v2 - 8) = v3 >> *(uint32_t *)(v1 + 1);
						*(uint32_t *)v2 = *(uint32_t *)(v1 + 5);
						*(uint32_t *)(v2 + 8) = *(uint32_t *)(v1 + 9);
						v2 += 8;
						v1 += 13;
					}
				}
				else
				{
					switch (v7)
					{
					case 158:
						v2 += 8;
						if (!*(uint32_t *)(v1 + 1))
							*(uint64_t *)v2 = (uint64_t)&v10;
					LABEL_14:
						v1 += 5;
						break;
					case 186:
						v4 = *(uint32_t *)(v1 + 1);
					LABEL_13:
						*(uint32_t *)(v2 + 8) = v4;
						v2 += 8;
						goto LABEL_14;
					case 234:
						v8 = (**(uint32_t **)v2 >> *(uint32_t *)(v1 + 1)) | *(uint32_t *)(v2 - 8);
						*(uint32_t *)(v2 - 8) = v8;
						*(uint32_t *)&v12[*(signed int *)(v1 + 5)] = v8;
						v2 -= 16;
						v1 += 9;
						break;
					}
				}
			}
			if (v7 > 63)
				break;
			if (v7 == 12)
			{
				++v1;
				v5 = *(uint32_t *)(v2 - 8);
				v6 = *(uint32_t **)v2;
				v2 -= 16;
				*v6 = v5;
			}
			else if (v7 == 40)
			{
				v1 += *(signed int *)(v1 + 1) + 1;
			}
		}
		if (v7 == 75)
		{
			*(uint32_t *)v2 = **(uint32_t **)v2 << *(uint32_t *)(v1 + 1);
			goto LABEL_14;
		}
		if (v7 == 107)
		{
			v4 = *(uint32_t *)&v12[*(signed int *)(v1 + 1)];
			goto LABEL_13;
		}
	} while (v7 != 64);

	return *(unsigned int *)v2;
}
